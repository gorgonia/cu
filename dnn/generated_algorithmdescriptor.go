package cudnn

/* Generated by gencudnn. DO NOT EDIT */

// #include <cudnn.h>
import "C"
import (
	"fmt"
	"runtime"
)

type Algorithm = interface{}

// AlgorithmDescriptor is a representation of cudnnAlgorithmDescriptor_t.
type AlgorithmDescriptor struct {
	internal C.cudnnAlgorithmDescriptor_t

	algorithm Algorithm
}

// NewAlgorithmDescriptor creates a new AlgorithmDescriptor.
func NewAlgorithmDescriptor(algorithm Algorithm) (retVal *AlgorithmDescriptor, err error) {
	var internal C.cudnnAlgorithmDescriptor_t
	if err := result(C.cudnnCreateAlgorithmDescriptor(&internal)); err != nil {
		return nil, err
	}

	switch a := algorithm.(type) {
	case ConvolutionFwdAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, a.C())); err != nil {
			return nil, err
		}
	case ConvolutionBwdFilterAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, a.C())); err != nil {
			return nil, err
		}
	case ConvolutionBwdDataAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, a.C())); err != nil {
			return nil, err
		}
	case RNNAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, a.C())); err != nil {
			return nil, err
		}
	case CTCLossAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, a.C())); err != nil {
			return nil, err
		}
	default:
		return nil, fmt.Errorf(`unknown algorithm specified`)
	}

	retVal = &AlgorithmDescriptor{
		internal:  internal,
		algorithm: algorithm,
	}
	runtime.SetFinalizer(retVal, destroyAlgorithmDescriptor)
	return retVal, nil
}

// C returns the internal cgo representation
func (a *AlgorithmDescriptor) C() C.cudnnAlgorithmDescriptor_t { return a.internal }

func destroyAlgorithmDescriptor(obj *AlgorithmDescriptor) {
	C.cudnnDestroyAlgorithmDescriptor(obj.internal)
}
