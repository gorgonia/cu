package cudnn

/* WAS Generated by gencudnn. DO NOT EDIT */

// #include <stdint.h>
// #include <cudnn.h>
import "C"
import "runtime"

// TensorTransform is a representation of cudnnTensorTransformDescriptor_t.
type TensorTransform struct {
	internal C.cudnnTensorTransformDescriptor_t

	nbDims     uint32
	destFormat TensorFormat
	padBeforeA []int32
	padAfterA  []int32
	foldA      []uint32
	direction  FoldingDirection
}

// NewTensorTransform creates a new TensorTransform.
func NewTensorTransform(nbDims uint32, destFormat TensorFormat, padBeforeA []int32, padAfterA []int32, foldA []uint32, direction FoldingDirection) (retVal *TensorTransform, err error) {
	var internal C.cudnnTensorTransformDescriptor_t
	if err := result(C.cudnnCreateTensorTransformDescriptor(&internal)); err != nil {
		return nil, err
	}

	padBeforeAC := int32s2CInt32Ptr(padBeforeA)
	padAfterAC := int32s2CInt32Ptr(padAfterA)
	foldAC := uint32s2CUint32Ptr(foldA)

	if err := result(C.cudnnSetTensorTransformDescriptor(internal, C.uint32_t(nbDims), destFormat.C(), padBeforeAC, padAfterAC, foldAC, direction.C())); err != nil {
		return nil, err
	}

	retVal = &TensorTransform{
		internal:   internal,
		nbDims:     nbDims,
		destFormat: destFormat,
		padBeforeA: padBeforeA,
		padAfterA:  padAfterA,
		foldA:      foldA,
		direction:  direction,
	}
	runtime.SetFinalizer(retVal, destroyTensorTransform)
	return retVal, nil
}

// C returns the cgo representation
func (t *TensorTransform) C() C.cudnnTensorTransformDescriptor_t { return t.internal }

func (t *TensorTransform) NDims() uint32 { return t.nbDims }

// DestFormat returns the internal destFormat.
func (t *TensorTransform) DestFormat() TensorFormat { return t.destFormat }

// PadBeforeA returns the internal `padBeforeA` padding slice.
func (t *TensorTransform) PadBeforeA() []int32 { return t.padBeforeA }

// PadAfterA returns the internal `padAfterA` padding slice.
func (t *TensorTransform) PadAfterA() []int32 { return t.padAfterA }

// FoldA returns the internal `foldA` slice.
func (t *TensorTransform) FoldA() []uint32 { return t.foldA }

// Direction returns the internal direction.
func (t *TensorTransform) Direction() FoldingDirection { return t.direction }

func destroyTensorTransform(obj *TensorTransform) {
	C.cudnnDestroyTensorTransformDescriptor(obj.internal)
}
